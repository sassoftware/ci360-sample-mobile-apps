/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeMobileSdkReactNativeCxxSpecJSI : public TurboModule {
protected:
  NativeMobileSdkReactNativeCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual double multiply(jsi::Runtime &rt, double a, double b) = 0;
  virtual void setAppVersionAndInitSDK(jsi::Runtime &rt, jsi::String appVersion) = 0;
  virtual void newPage(jsi::Runtime &rt, jsi::String uri) = 0;
  virtual void addAppEvent(jsi::Runtime &rt, jsi::String eventKey, std::optional<jsi::Object> data) = 0;
  virtual jsi::Value identity(jsi::Runtime &rt, jsi::String value, jsi::String type) = 0;
  virtual jsi::Value detachIdentity(jsi::Runtime &rt) = 0;
  virtual void startMonitoringLocation(jsi::Runtime &rt) = 0;
  virtual void disableLocationMonitoring(jsi::Runtime &rt) = 0;
  virtual void getTenantID(jsi::Runtime &rt, jsi::Function callback) = 0;
  virtual void getDeviceID(jsi::Runtime &rt, jsi::Function callback) = 0;
  virtual void getTagServer(jsi::Runtime &rt, jsi::Function callback) = 0;
  virtual void getApplicationVersion(jsi::Runtime &rt, jsi::Function callback) = 0;
  virtual void setApplicationVersion(jsi::Runtime &rt, jsi::String version) = 0;
  virtual void registerForMobileMessage(jsi::Runtime &rt, jsi::String token) = 0;
  virtual void handleMobileMessage(jsi::Runtime &rt, jsi::Object data, jsi::Function callback) = 0;
  virtual jsi::Value loadSpotData(jsi::Runtime &rt, jsi::String spotId, std::optional<jsi::Object> attributes) = 0;
  virtual void registerSpotViewable(jsi::Runtime &rt, jsi::String spotId) = 0;
  virtual void registerSpotClicked(jsi::Runtime &rt, jsi::String spotId) = 0;

};

template <typename T>
class JSI_EXPORT NativeMobileSdkReactNativeCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "MobileSdkReactNative";

protected:
  NativeMobileSdkReactNativeCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeMobileSdkReactNativeCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeMobileSdkReactNativeCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeMobileSdkReactNativeCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    double multiply(jsi::Runtime &rt, double a, double b) override {
      static_assert(
          bridging::getParameterCount(&T::multiply) == 3,
          "Expected multiply(...) to have 3 parameters");

      return bridging::callFromJs<double>(
          rt, &T::multiply, jsInvoker_, instance_, std::move(a), std::move(b));
    }
    void setAppVersionAndInitSDK(jsi::Runtime &rt, jsi::String appVersion) override {
      static_assert(
          bridging::getParameterCount(&T::setAppVersionAndInitSDK) == 2,
          "Expected setAppVersionAndInitSDK(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setAppVersionAndInitSDK, jsInvoker_, instance_, std::move(appVersion));
    }
    void newPage(jsi::Runtime &rt, jsi::String uri) override {
      static_assert(
          bridging::getParameterCount(&T::newPage) == 2,
          "Expected newPage(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::newPage, jsInvoker_, instance_, std::move(uri));
    }
    void addAppEvent(jsi::Runtime &rt, jsi::String eventKey, std::optional<jsi::Object> data) override {
      static_assert(
          bridging::getParameterCount(&T::addAppEvent) == 3,
          "Expected addAppEvent(...) to have 3 parameters");

      return bridging::callFromJs<void>(
          rt, &T::addAppEvent, jsInvoker_, instance_, std::move(eventKey), std::move(data));
    }
    jsi::Value identity(jsi::Runtime &rt, jsi::String value, jsi::String type) override {
      static_assert(
          bridging::getParameterCount(&T::identity) == 3,
          "Expected identity(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::identity, jsInvoker_, instance_, std::move(value), std::move(type));
    }
    jsi::Value detachIdentity(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::detachIdentity) == 1,
          "Expected detachIdentity(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::detachIdentity, jsInvoker_, instance_);
    }
    void startMonitoringLocation(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::startMonitoringLocation) == 1,
          "Expected startMonitoringLocation(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::startMonitoringLocation, jsInvoker_, instance_);
    }
    void disableLocationMonitoring(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::disableLocationMonitoring) == 1,
          "Expected disableLocationMonitoring(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::disableLocationMonitoring, jsInvoker_, instance_);
    }
    void getTenantID(jsi::Runtime &rt, jsi::Function callback) override {
      static_assert(
          bridging::getParameterCount(&T::getTenantID) == 2,
          "Expected getTenantID(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::getTenantID, jsInvoker_, instance_, std::move(callback));
    }
    void getDeviceID(jsi::Runtime &rt, jsi::Function callback) override {
      static_assert(
          bridging::getParameterCount(&T::getDeviceID) == 2,
          "Expected getDeviceID(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::getDeviceID, jsInvoker_, instance_, std::move(callback));
    }
    void getTagServer(jsi::Runtime &rt, jsi::Function callback) override {
      static_assert(
          bridging::getParameterCount(&T::getTagServer) == 2,
          "Expected getTagServer(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::getTagServer, jsInvoker_, instance_, std::move(callback));
    }
    void getApplicationVersion(jsi::Runtime &rt, jsi::Function callback) override {
      static_assert(
          bridging::getParameterCount(&T::getApplicationVersion) == 2,
          "Expected getApplicationVersion(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::getApplicationVersion, jsInvoker_, instance_, std::move(callback));
    }
    void setApplicationVersion(jsi::Runtime &rt, jsi::String version) override {
      static_assert(
          bridging::getParameterCount(&T::setApplicationVersion) == 2,
          "Expected setApplicationVersion(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setApplicationVersion, jsInvoker_, instance_, std::move(version));
    }
    void registerForMobileMessage(jsi::Runtime &rt, jsi::String token) override {
      static_assert(
          bridging::getParameterCount(&T::registerForMobileMessage) == 2,
          "Expected registerForMobileMessage(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::registerForMobileMessage, jsInvoker_, instance_, std::move(token));
    }
    void handleMobileMessage(jsi::Runtime &rt, jsi::Object data, jsi::Function callback) override {
      static_assert(
          bridging::getParameterCount(&T::handleMobileMessage) == 3,
          "Expected handleMobileMessage(...) to have 3 parameters");

      return bridging::callFromJs<void>(
          rt, &T::handleMobileMessage, jsInvoker_, instance_, std::move(data), std::move(callback));
    }
    jsi::Value loadSpotData(jsi::Runtime &rt, jsi::String spotId, std::optional<jsi::Object> attributes) override {
      static_assert(
          bridging::getParameterCount(&T::loadSpotData) == 3,
          "Expected loadSpotData(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::loadSpotData, jsInvoker_, instance_, std::move(spotId), std::move(attributes));
    }
    void registerSpotViewable(jsi::Runtime &rt, jsi::String spotId) override {
      static_assert(
          bridging::getParameterCount(&T::registerSpotViewable) == 2,
          "Expected registerSpotViewable(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::registerSpotViewable, jsInvoker_, instance_, std::move(spotId));
    }
    void registerSpotClicked(jsi::Runtime &rt, jsi::String spotId) override {
      static_assert(
          bridging::getParameterCount(&T::registerSpotClicked) == 2,
          "Expected registerSpotClicked(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::registerSpotClicked, jsInvoker_, instance_, std::move(spotId));
    }

  private:
    friend class NativeMobileSdkReactNativeCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
