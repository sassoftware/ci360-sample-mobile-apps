apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

// import com.android.build.OutputFile
// import org.apache.tools.ant.taskdefs.condition.Os
project.ext.vectoricons = [
  iconFontNames: ['FontAwesome.ttf']
]
// apply from: file('../../node_modules/react-native-vector-icons/fonts.gradle')

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false


/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'


/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: true,  // clean and rebuild if changing
]

// apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
// def enableSeparateBuildPerCPUArchitecture = false

// /**
//  * Run Proguard to shrink the Java bytecode in release builds.
//  */
// def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
// def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here. If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
// def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for.
 */
// def reactNativeArchitectures() {
//     def value = project.getProperties().get("reactNativeArchitectures")
//     return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
// }

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    // compileSdkVersion rootProject.ext.compileSdkVersion
    namespace "com.example.mobilesdkreactnative"
    defaultConfig {
        applicationId "com.example.mobilesdkreactnative"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        // buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

        // if (isNewArchitectureEnabled()) {
        //     // We configure the NDK build only if you decide to opt-in for the New Architecture.
        //     externalNativeBuild {
        //         ndkBuild {
        //             arguments "APP_PLATFORM=android-21",
        //                 "APP_STL=c++_shared",
        //                 "NDK_TOOLCHAIN_VERSION=clang",
        //                 "GENERATED_SRC_DIR=$buildDir/generated/source",
        //                 "PROJECT_BUILD_DIR=$buildDir",
        //                 "REACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
        //                 "REACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build"
        //             cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
        //             cppFlags "-std=c++17"
        //             // Make sure this target name is the same you specify inside the
        //             // src/main/jni/Android.mk file for the `LOCAL_MODULE` variable.
        //             targets "example_appmodules"
        //             // Fix for windows limit on number of character in file paths and in command lines
        //             if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        //                 arguments "NDK_APP_SHORT_COMMANDS=true"
        //             }
        //         }
        //     }
        //     if (!enableSeparateBuildPerCPUArchitecture) {
        //         ndk {
        //             abiFilters (*reactNativeArchitectures())
        //         }
        //     }
        // }
    }

    // if (isNewArchitectureEnabled()) {
    //     // We configure the NDK build only if you decide to opt-in for the New Architecture.
    //     externalNativeBuild {
    //         ndkBuild {
    //             path "$projectDir/src/main/jni/Android.mk"
    //         }
    //     }
    //     def reactAndroidProjectDir = project(':ReactAndroid').projectDir
    //     def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
    //         dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
    //         from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
    //         into("$buildDir/react-ndk/exported")
    //     }
    //     def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
    //         dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
    //         from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
    //         into("$buildDir/react-ndk/exported")
    //     }
    //     afterEvaluate {
    //         // If you wish to add a custom TurboModule or component locally,
    //         // you should uncomment this line.
    //         // preBuild.dependsOn("generateCodegenArtifactsFromSchema")
    //         preDebugBuild.dependsOn(packageReactNdkDebugLibs)
    //         preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)

    //         // Due to a bug inside AGP, we have to explicitly set a dependency
    //         // between configureNdkBuild* tasks and the preBuild tasks.
    //         // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
    //         configureNdkBuildRelease.dependsOn(preReleaseBuild)
    //         configureNdkBuildDebug.dependsOn(preDebugBuild)
    //         reactNativeArchitectures().each { architecture ->
    //             tasks.findByName("configureNdkBuildDebug[${architecture}]")?.configure {
    //                 dependsOn("preDebugBuild")
    //             }
    //             tasks.findByName("configureNdkBuildRelease[${architecture}]")?.configure {
    //                 dependsOn("preReleaseBuild")
    //             }
    //         }
    //     }
    // }

    // splits {
    //     abi {
    //         reset()
    //         enable enableSeparateBuildPerCPUArchitecture
    //         universalApk false  // If true, also generate a universal APK
    //         include (*reactNativeArchitectures())
    //     }
    // }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    // applicationVariants.all { variant ->
    //     variant.outputs.each { output ->
    //         // For each separate APK per architecture, set a unique version code as described here:
    //         // https://developer.android.com/studio/build/configure-apk-splits.html
    //         // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
    //         def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
    //         def abi = output.getFilter(OutputFile.ABI)
    //         if (abi != null) {  // null for the universal-debug, universal-release variants
    //             output.versionCodeOverride =
    //                     defaultConfig.versionCode * 1000 + versionCodes.get(abi)
    //         }

    //     }
    // }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //noinspection GradleDynamicVersion
    // implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "com.facebook.react:react-android"

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.google.android.gms:play-services-location:19.0.1'
    implementation platform('com.google.firebase:firebase-bom:30.3.1')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-core'
    implementation 'com.google.firebase:firebase-messaging'
    implementation files('../../../android/libs/SASCollector.jar')
    implementation project(':react-native-vector-icons')

    // debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
    //     exclude group:'com.facebook.fbjni'
    // }

    // debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
    //     exclude group:'com.facebook.flipper'
    //     exclude group:'com.squareup.okhttp3', module:'okhttp'
    // }

    // debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
    //     exclude group:'com.facebook.flipper'
    // }

    /*if (enableHermes) {
//        def hermesPath = "../../node_modules/hermes-engine/android/";
      def hermesPath = "../../node_modules/hermesvm/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    } */


  // if (enableHermes) {
  //   //noinspection GradleDynamicVersion
  //   implementation("com.facebook.react:hermes-engine:+") { // From node_modules
  //     exclude group:'com.facebook.fbjni'
  //   }
  // } else {
  //   implementation jscFlavor
  // }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

if (isNewArchitectureEnabled()) {
  // Since our library doesn't invoke codegen automatically we need to do it here.
  tasks.register('invokeLibraryCodegen', Exec) {
      workingDir "$rootDir/../../"
      def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')

      if (isWindows) {
        commandLine 'cmd', '/c', 'npx bob build --target codegen'
      } else {
        commandLine 'sh', '-c', 'npx bob build --target codegen'
      }
    }
    preBuild.dependsOn invokeLibraryCodegen
    // If new architecture is enabled, we let you build RN from source
    // Otherwise we fallback to a prebuilt .aar bundled in the NPM package.
    // This will be applied to all the imported transtitive dependency.
    // configurations.all {
    //     resolutionStrategy.dependencySubstitution {
    //         substitute(module("com.facebook.react:react-native"))
    //                 .using(project(":ReactAndroid")).because("On New Architecture we're building React Native from source")
    //     }
    // }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
// task copyDownloadableDepsToLibs(type: Copy) {
//     from configurations.implementation
//     into 'libs'
// }

// apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// def isNewArchitectureEnabled() {
//     // To opt-in for the New Architecture, you can either:
//     // - Set `newArchEnabled` to true inside the `gradle.properties` file
//     // - Invoke gradle with `-newArchEnabled=true`
//     // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
//     return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
// }
